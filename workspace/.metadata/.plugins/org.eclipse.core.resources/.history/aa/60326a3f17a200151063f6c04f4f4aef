package collage;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.text.ParseException;
import java.util.Arrays;

import com.xuggle.xuggler.ICodec;
import com.xuggle.xuggler.IPixelFormat;
import com.xuggle.xuggler.IRational;
import com.xuggle.xuggler.IStreamCoder;
import com.xuggle.xuggler.IStreamCoder.Direction;

public class RTSPResponsePacket extends RTSPPacket {
  private Method method = null;
  private Integer rtspSeqNum = null;
  private Integer sessionNum = null;
  private ErrorCode errorCode = null;

  private String rawData = null;

  // OPTIONS
  private Method[] supportedMethods = {};
  // DESCRIBE
  private IStreamCoder audioCoder = null;
  private IStreamCoder videoCoder = null;
  private Integer aStreamIndex = null;
  private Integer vStreamIndex = null;

  // Transport
  private TransportProtocol transportProtocol = null;
  private Integer[] clientPorts = {};
  private Integer[] serverPorts = {};
  private TransportMode transportMode = null;
  
  // Content
  private String content = null;
  private Integer contentLength = null;
  private boolean contentReady = false;
  
  private boolean isStarted = false;
  private boolean isDone = false;
  
  protected RTSPResponsePacket() {}
  
  public static RTSPResponsePacket make(Method reqType) {
    RTSPResponsePacket packet = new RTSPResponsePacket();
    packet.method = reqType;
    return packet;
  }
  public static RTSPResponsePacket encode(Method reqType, ErrorCode errorCode, Integer rtspSeqNum, Integer sessionNum) throws IllegalArgumentException {
    RTSPResponsePacket packet = new RTSPResponsePacket();
    packet.method = reqType;
    packet.errorCode = errorCode;
    packet.rtspSeqNum = rtspSeqNum;
    packet.sessionNum = sessionNum;
    
    packet.encode();
    
    return packet;
  }
  public static RTSPResponsePacket encode(Method reqType, ErrorCode errorCode, Integer rtspSeqNum, Integer sessionNum,
      TransportProtocol transportProtocol, TransportMode transportMode, Integer[] clientPorts, Integer[] serverPorts) throws IllegalArgumentException {
    RTSPResponsePacket packet = new RTSPResponsePacket();
    packet.method = reqType;
    packet.errorCode = errorCode;
    packet.rtspSeqNum = rtspSeqNum;
    packet.sessionNum = sessionNum;
    packet.transportProtocol = transportProtocol;
    packet.transportMode = transportMode;
    packet.clientPorts = clientPorts;
    packet.serverPorts = serverPorts;
    
    packet.encode();
    
    return packet;
  }
  public static RTSPResponsePacket encode(Method reqType, ErrorCode errorCode, Integer rtspSeqNum, Integer sessionNum,
      Method[] supportedMethods) throws IllegalArgumentException {
    RTSPResponsePacket packet = new RTSPResponsePacket();
    packet.method = reqType;
    packet.errorCode = errorCode;
    packet.rtspSeqNum = rtspSeqNum;
    packet.sessionNum = sessionNum;
    packet.supportedMethods = supportedMethods;
    
    packet.encode();

    return packet;
  }
  public static RTSPResponsePacket encode(Method reqType, ErrorCode errorCode, Integer rtspSeqNum, Integer sessionNum,
      MediaStream mediaStream) throws IllegalArgumentException { 
    if (mediaStream == null)
      throw new IllegalArgumentException("null mediaStream");
    return encode(reqType, errorCode, rtspSeqNum, sessionNum,
        mediaStream.getAudioDecoder(), mediaStream.getVideoDecoder(),
        mediaStream.getAudioStreamId(), mediaStream.getVideoStreamId());
  }
  public static RTSPResponsePacket encode(Method reqType, ErrorCode errorCode, Integer rtspSeqNum, Integer sessionNum,
      IStreamCoder audioCoder, IStreamCoder videoCoder,
      Integer aStreamIndex, Integer vStreamIndex) throws IllegalArgumentException { 
    RTSPResponsePacket packet = new RTSPResponsePacket();
    packet.method = reqType;
    packet.errorCode = errorCode;
    packet.rtspSeqNum = rtspSeqNum;
    packet.sessionNum = sessionNum;
    packet.audioCoder = audioCoder;
    packet.videoCoder = videoCoder;
    packet.aStreamIndex = aStreamIndex;
    packet.vStreamIndex = aStreamIndex;

    packet.encode();
    return packet;
  }
  
  public static void main(String argv[]) throws Exception {
    if (argv.length < 1)
      throw new RuntimeException("Usage: <filename>");
    RTSPResponsePacket response; 
    RTSPResponsePacket decoded; 
    StringReader stringReader;
    BufferedReader reader;
    
    // OPTIONS test
    response = RTSPResponsePacket.encode(Method.OPTIONS, RTSPPacket.ERROR_CODE_OK, 0, null,
        RTSPPacket.DEFAULT_OPTIONS);
    decoded = RTSPResponsePacket.make(Method.OPTIONS);
    stringReader = new StringReader(response.rawData());
    reader = new BufferedReader(stringReader);
    while (!decoded.isDone())
      decoded.decode(reader);
    if (!response.equals(decoded))
      System.err.println(response.method() + " test failed");
    else
      System.out.println(response.method() + " test passed");

    // DESCRIBE test
    IStreamCoder audioCoder = IStreamCoder.make(Direction.ENCODING, ICodec.ID.CODEC_ID_MP3);
    IStreamCoder videoCoder = IStreamCoder.make(IStreamCoder.Direction.ENCODING, ICodec.findEncodingCodec(CollageGlobal.DEFAULT_VIDEO_CODEC_ID));
    videoCoder.setWidth(100);
    videoCoder.setHeight(100);
    videoCoder.setPixelType(CollageGlobal.DEFAULT_VIDEO_PIXEL_FORMAT);
    videoCoder.setTimeBase(CollageGlobal.DEFAULT_VIDEO_TIME_BASE);
    response = RTSPResponsePacket.encode(Method.DESCRIBE, RTSPPacket.ERROR_CODE_OK, 0, null,
        audioCoder, videoCoder, 0, 1);
    decoded = RTSPResponsePacket.make(Method.DESCRIBE);
    stringReader = new StringReader(response.rawData());
    reader = new BufferedReader(stringReader);
    while (!decoded.isDone())
      decoded.decode(reader);
    if (!response.equals(decoded))
      System.err.println(response.method() + " test failed");
    else
      System.out.println(response.method() + " test passed");

    // SETUP test
    response = RTSPResponsePacket.encode(Method.SETUP, RTSPPacket.ERROR_CODE_OK, 0, null,
        TransportProtocol.RTP, TransportMode.MULTICAST, new Integer[] {554}, new Integer[] {454}); 
    decoded = RTSPResponsePacket.make(Method.SETUP);
    stringReader = new StringReader(response.rawData());
    reader = new BufferedReader(stringReader);
    while (!decoded.isDone())
      decoded.decode(reader);
    if (!response.equals(decoded))
      System.err.println(response.method() + " test failed");
    else
      System.out.println(response.method() + " test passed");

    // ERROR test
    ErrorCode[] errorCodes = new ErrorCode[] {
        ErrorCode.OK, ErrorCode.BAD_REQUEST,
        ErrorCode.INTERNAL_ERROR, ErrorCode.INVALID_HEADER_FIELD,
        ErrorCode.INVALID_METHOD, ErrorCode.INVALID_SESSION
    };
    for (int i=0; i<errorCodes.length; i++) {
      response = RTSPResponsePacket.encode(Method.PLAY, errorCodes[i], 0, null);
      decoded = RTSPResponsePacket.make(Method.PLAY);
      stringReader = new StringReader(response.rawData());
      reader = new BufferedReader(stringReader);
      while (!decoded.isDone())
        decoded.decode(reader);
      if (!response.equals(decoded))
        System.err.println(response.errorCode() + " test failed");
      else
        System.out.println(response.errorCode() + " test passed");
    }
  }

  private void decodeStatus(String line) {
    String[] tokens = line.split("\\s+", 3);
    if (tokens.length != 3)
      throw new IllegalArgumentException("Invalid status line: " + line);

    if (!tokens[0].equals(RTSP_VERSION))
      throw new IllegalArgumentException("Unsupported RTSP Version: " + tokens[0]);
    errorCode = ErrorCode.parse(tokens[1]);
  }
  private void decodeSeqNum(String line) {
    String[] tokens = line.split("\\s+");
    if (tokens.length != 2)
      throw new IllegalArgumentException("Invalid sequence num line: " + line);
    
    try {
      rtspSeqNum = Integer.parseInt(tokens[1]);
    } catch (NumberFormatException e) {
      throw new IllegalArgumentException("Invalid sequence num: " + tokens[1]);
    }
  }
  private void decodeSessionNum(String line) {
    String[] tokens = line.split("\\s+");
    if (tokens.length != 2)
      throw new IllegalArgumentException("Invalid session num line: " + line);
    
    try {
      sessionNum = Integer.parseInt(tokens[1]);
    } catch (NumberFormatException e) {
      throw new IllegalArgumentException("Invalid session num: " + tokens[1]);
    }
  }
  private void decodeTransport(String line) throws ParseException {
    String[] tokens = line.split("\\s*:\\s*",2);
    if (tokens.length != 2)
      throw new ParseException("Invalid transport line: " + line, 0);
    String[] params = tokens[1].trim().split(";");
    for (int i=0; i<params.length; i++) {
      boolean found = false;
      try {
      if (params[i].contains("client_port")) {
        String[] paramPair = params[i].split("=");
        if (paramPair.length != 2)
          throw new ParseException("Invalid param in transport line: " + params[i], 0);
        paramPair = paramPair[1].split("-");
        clientPorts = new Integer[paramPair.length];
        for (int j=0; j<paramPair.length; j++)
          clientPorts[j] = Integer.parseInt(paramPair[j]);
        found = true;
      } else if (params[i].contains("server_port")) {
          String[] paramPair = params[i].split("=");
          if (paramPair.length != 2)
            throw new ParseException("Invalid param in transport line: " + params[i], 0);
          paramPair = paramPair[1].split("-");
          serverPorts = new Integer[paramPair.length];
          for (int j=0; j<paramPair.length; j++)
            serverPorts[j] = Integer.parseInt(paramPair[j]);
          found = true;
      } else {
        for (int j=0; j<TransportProtocol.values().length; j++)
          if (TransportProtocol.values()[j].name().equals(params[i])) {
            transportProtocol = TransportProtocol.values()[j];
            found = true;
          }
        for (int j=0; j<TransportMode.values().length; j++)
          if (TransportMode.values()[j].rtspName().equals(params[i])) {
            transportMode = TransportMode.values()[j];
            found = true;
          }
      }
      } catch (Exception e) {
        throw new ParseException("Invalid param in transport line: " + params[i], 0);
      }
      if (!found)
        throw new ParseException("Unknown transport parameter: " + params[i], 0);
      
    }
  }
  private void decodePublic(String line) {
    String[] tokens = line.split("\\s*:\\s*",2);
    if (tokens.length != 2)
      throw new IllegalArgumentException("Invalid options line: " + line);
    tokens = tokens[1].split("\\s*,\\s*");
    supportedMethods = new Method[tokens.length];
    for (int i=0; i<tokens.length; i++)
      supportedMethods[i] = Method.valueOf(tokens[i]);
  }
  private void decodeContentLength(String line) {
    String[] tokens = line.split("\\s*:\\s*",2);
    if (tokens.length != 2)
      throw new IllegalArgumentException("Invalid content length line: " + line);
    
    try {
      contentLength = Integer.parseInt(tokens[1]);
    } catch (NumberFormatException e) {
      throw new IllegalArgumentException("Invalid session num: " + tokens[1]);
    }
  }
  private void decodeContent(String content) {
    switch (method) {
    case DESCRIBE:
      ICodec.ID aCodecID = null;
      Integer aSampleRate = null;
      Integer aChannels = null;
      Integer aFrameRateNum = null;
      Integer aFrameRateDen = null;
      Integer aStreamIndex = null;
      ICodec.ID vCodecID = null;
      Integer vWidth = null;
      Integer vHeight = null;
      IPixelFormat.Type vPixelType = null;
      Integer vTimeBaseNum = null;
      Integer vTimeBaseDen = null;
      Integer vFrameRateNum = null;
      Integer vFrameRateDen = null;
      Integer vStreamIndex = null;
      String[] params = content.split(";");
      for (int i=0; i<params.length; i++) {
        String[] paramPair = params[i].split("=");
        if (paramPair.length != 2)
          throw new RuntimeException("Invalid param in SETUP response: " + params[i]);
        switch(paramPair[0]) {
        case "aCodecID":
          aCodecID = ICodec.ID.swigToEnum(Integer.parseInt(paramPair[1]));
          break;
        case "aSampleRate":
          aSampleRate = Integer.parseInt(paramPair[1]);
          break;
        case "aChannels":
          aChannels = Integer.parseInt(paramPair[1]);
          break;
        case "aFrameRateNum":
          aFrameRateNum = Integer.parseInt(paramPair[1]);
          break;
        case "aFrameRateDen":
          aFrameRateNum = Integer.parseInt(paramPair[1]);
          break;
        case "aStreamIndex":
          aStreamIndex = Integer.parseInt(paramPair[1]);
          break;
        case "vCodecID":
          vCodecID = ICodec.ID.swigToEnum(Integer.parseInt(paramPair[1]));
          break;
        case "vWidth":
          vWidth = Integer.parseInt(paramPair[1]);
          break;
        case "vHeight":
          vHeight = Integer.parseInt(paramPair[1]);
          break;
        case "vPixelType":
          vPixelType = IPixelFormat.Type.swigToEnum(Integer.parseInt(paramPair[1]));
          break;
        case "vTimeBaseNum":
          vTimeBaseNum = Integer.parseInt(paramPair[1]);
          break;
        case "vTimeBaseDen":
          vTimeBaseDen = Integer.parseInt(paramPair[1]);
          break;
        case "vFrameRateNum":
          vFrameRateNum = Integer.parseInt(paramPair[1]);
          break;
        case "vFrameRateDen":
          vFrameRateDen = Integer.parseInt(paramPair[1]);
          break;
        case "vStreamIndex":
          vStreamIndex = Integer.parseInt(paramPair[1]);
          break;
        default:
          throw new RuntimeException("Invalid param in SETUP response: " + paramPair[0]);
        }
      }
      if ((aCodecID != null)  || (aSampleRate != null) ||
          (aChannels != null) || (aStreamIndex != null)) {
        if ((aCodecID == null)  || (aSampleRate == null) ||
            (aChannels == null) || (aStreamIndex == null)) 
          throw new IllegalArgumentException("Incomplete audio stream description: " + content);
        audioCoder = IStreamCoder.make(IStreamCoder.Direction.DECODING, aCodecID);
        audioCoder.setSampleRate(aSampleRate);
        audioCoder.setChannels(aChannels);
        audioCoder.setFrameRate(IRational.make(aFrameRateNum, aFrameRateDen));
        if (audioCoder.open(null, null) < 0)
          throw new RuntimeException("Failed to open audio coder");
        this.aStreamIndex = aStreamIndex;
      }
      if ((vCodecID != null)     || (vWidth != null) ||
          (vHeight != null)      || (vPixelType != null) ||
          (vTimeBaseNum != null) || (vTimeBaseDen != null) ||
          (vFrameRateNum != null) || (vFrameRateDen != null)) {
        if ((vCodecID == null)     || (vWidth == null) ||
            (vHeight == null)      || (vPixelType == null) ||
            (vTimeBaseNum == null) || (vTimeBaseDen == null) ||
            (vFrameRateNum == null) || (vFrameRateDen == null))
          throw new IllegalArgumentException("Incomplete video stream description: " + content);
        videoCoder = IStreamCoder.make(IStreamCoder.Direction.ENCODING, vCodecID);
        videoCoder.setWidth(vWidth);
        videoCoder.setHeight(vHeight);
        videoCoder.setPixelType(vPixelType);
        videoCoder.setTimeBase(IRational.make(vTimeBaseNum, vTimeBaseDen));
        videoCoder.setFrameRate(IRational.make(vFrameRateNum, vFrameRateDen));
        if (videoCoder.open(null, null) < 0)
          throw new RuntimeException("Failed to open video coder");
        this.vStreamIndex = vStreamIndex;
      }
      break;
    default:
      break;
    }
  }
  private void decode(String line) throws ParseException {
    if (line.length() == 0 && !isStarted)
      return;
    if (rawData == null)
      rawData = "";
    rawData += line + CRLF;
    if (!isStarted) {
      decodeStatus(line);
      isStarted = true;
      return;
    }
    if (line.length() == 0) {
      if (contentLength != null) {
        contentReady = true;
        return;
      } else {
        isDone = true;
        return;
      }
    }
    String[] pair = line.split("\\s*:\\s*",2);
    if (pair.length != 2)
      throw new IllegalArgumentException("Invalid header line: " + line);
    switch (pair[0]) {
    case "CSeq":
      decodeSeqNum(line);
      break;
    case "Session":
      decodeSessionNum(line);
      break;
    case "Transport":
      decodeTransport(line);
      break;
    case "Public":
      decodePublic(line);
      break; 
    case "Content-length":
      decodeContentLength(line);
      break;
    default:
      throw new IllegalArgumentException("Unsupported header type: " + pair[0]);
    }
  }
  /**
   * Call repeatedly on same <code>BufferedReader</code>. Check <code>isDone()</code> for response completeness.
   * @param reader already open <code>BufferedReader</code>
   * @throws IOException if failed to read line from <code>reader</code>
   * @throws ParseException if error parsing input format
   * @throws IllegalArgumentException if correctly formatted invalid input
   */
  public void decode(BufferedReader reader) throws IOException, ParseException, IllegalArgumentException {
    if (isDone)
      throw new RuntimeException("Packet already complete");
    if (!contentReady) {
      String line = reader.readLine();
      decode(line);
    } else {
      char[] buf = new char[contentLength];
      int numBytes = 0;
      numBytes = reader.read(buf, 0, contentLength);
      if (numBytes != contentLength)
        throw new RuntimeException(numBytes + " bytes read, expecting " + contentLength);
      decodeContent(new String(buf));
      isDone = true;
      rawData += new String(buf) + CRLF;
    }
  }
  
  private String encodeStatus() {
    return RTSP_VERSION + " " + errorCode.code() + " " + errorCode.description() + CRLF;
  }
  private String encodeSeqNum() {
    return "CSeq: " + rtspSeqNum + CRLF;
  }
  private String encodeSessionNum() {
    String ret = "";
    if (sessionNum != null)
      ret = "Session: " + sessionNum + CRLF;
    return ret;
  }
  private String encodeTransport() {
    String ret = "";
    if (transportProtocol != null || clientPorts.length > 0 || transportMode != null) {
      ret += "Transport: ";
      if (transportProtocol != null) {
        for (int i=0; i<TransportProtocol.values().length-1; i++)
          ret += TransportProtocol.values()[i] + "/";
        ret += TransportProtocol.values()[TransportProtocol.values().length-1] + ";";
      }
      if (clientPorts != null && clientPorts.length > 0) {
        ret += "client_port=" + clientPorts[0];
        if (clientPorts.length > 1)
          ret += "-" + clientPorts[1];
        ret += ";";
      }
      if (serverPorts != null && serverPorts.length > 0) {
        ret += "server_port=" + serverPorts[0];
        if (serverPorts.length > 1)
          ret += "-" + serverPorts[1];
        ret += ";";
      }
      if (transportMode != null) {
        ret += transportMode.rtspName() + ";";
      }
      ret += CRLF;
    }
    return ret;
  }
  private String encodePublic() {
    String pub = "";
    switch (method) {
    case OPTIONS:
      pub += "Public: ";
      if (supportedMethods.length > 0) {
        for (int i=0; i<supportedMethods.length-1; i++)
          pub += supportedMethods[i].toString() + ", ";
        pub += supportedMethods[supportedMethods.length-1].toString() + CRLF;
      }
      break;
    default:
      break;
    }
    return pub;
  }
  private String encodeContent() {
    String all = "";
    switch (method) {
    case DESCRIBE:
      if (audioCoder != null && aStreamIndex != null) {
        if (content == null) content = "";
        content += "aStreamIndex="  + aStreamIndex + ";";
        content += "aCodecID="      + audioCoder.getCodecID().swigValue() + ";";
        content += "aSampleRate="   + audioCoder.getSampleRate() + ";";
        content += "aChannels="     + audioCoder.getChannels() + ";";
        if (audioCoder.getFrameRate() != null) {
          content += "aFrameRateNum=" + audioCoder.getFrameRate().getNumerator() + ";";
          content += "aFrameRateDen=" + audioCoder.getFrameRate().getDenominator() + ";";
        }
      };
      if (videoCoder != null && vStreamIndex != null) {
        if (content == null) content = "";
        content += "vStreamIndex="  + vStreamIndex + ";";
        content += "vCodecID="      + videoCoder.getCodecID().swigValue() + ";";
        content += "vWidth="        + videoCoder.getWidth() + ";";
        content += "vHeight="       + videoCoder.getHeight() + ";";
        content += "vPixelType="    + videoCoder.getPixelType().swigValue() + ";";
        content += "vTimeBaseNum="  + videoCoder.getTimeBase().getNumerator() + ";";
        content += "vTimeBaseDen="  + videoCoder.getTimeBase().getDenominator() + ";";
        if (videoCoder.getFrameRate() != null) {
          content += "vFrameRateNum=" + videoCoder.getFrameRate().getNumerator() + ";";
          content += "vFrameRateDen=" + videoCoder.getFrameRate().getDenominator() + ";";
        }
      }
      break;
    default:
      break;
    }
    if (content != null)
      contentLength = content.length();
    if (contentLength != null && contentLength > 0) {
      all += "Content-length: " + contentLength + CRLF;
      all += CRLF;
      all += content + CRLF;
    }
    return all;
  }
  private void encode() {
    String encodedPacket = "";
    encodedPacket += encodeStatus();
    encodedPacket += encodeSeqNum();
    encodedPacket += encodeSessionNum();
    encodedPacket += encodeTransport();
    encodedPacket += encodePublic();
    encodedPacket += encodeContent();
    encodedPacket += CRLF;
    this.rawData = encodedPacket;
  }
  
  public int hashCode() {
    int code = 1;
    code = code * 31 + method.ordinal();
    code = code * 17 + rtspSeqNum;
    code = code * 31 + sessionNum;
    code = code * 17 + errorCode.ordinal();
    code = code * 31 + Arrays.hashCode(supportedMethods);
    code = code * 17 + audioCoder.getCodecID().swigValue();
    code = code * 31 + audioCoder.getSampleRate();
    code = code * 17 + audioCoder.getChannels();
    code = code * 31 + videoCoder.getCodecID().swigValue();
    code = code * 17 + videoCoder.getWidth();
    code = code * 31 + videoCoder.getHeight();
    code = code * 17 + videoCoder.getPixelType().swigValue();
    code = code * 31 + videoCoder.getTimeBase().getNumerator();
    code = code * 31 + videoCoder.getTimeBase().getDenominator();
    code = code * 17 + aStreamIndex;
    code = code * 31 + vStreamIndex;
    code = code * 17 + transportProtocol.ordinal();
    code = code * 31 + transportMode.ordinal();
    code = code * 17 + Arrays.hashCode(clientPorts);
    code = code * 31 + Arrays.hashCode(serverPorts);
    code = code * 17 + contentLength;
    code = code * 31 + content.hashCode();
    return code;
  }
  @Override
  public boolean equals(Object obj) {
    if (!(obj instanceof RTSPResponsePacket)) return false;
    RTSPResponsePacket other = (RTSPResponsePacket)obj;
    if (method != other.method) return false;
    if (rtspSeqNum != other.rtspSeqNum && !(rtspSeqNum != null && rtspSeqNum.equals(other.rtspSeqNum))) return false;
    if (sessionNum != other.sessionNum && !(sessionNum != null && sessionNum.equals(other.sessionNum))) return false;
    if (errorCode != other.errorCode) return false;
    if (supportedMethods.length != 0 && !Arrays.equals(supportedMethods, other.supportedMethods)) return false;
    if (audioCoder != other.audioCoder && !(audioCoder != null &&
        (audioCoder.getCodecID().swigValue() == other.audioCoder.getCodecID().swigValue() &&
        audioCoder.getSampleRate() == other.audioCoder.getSampleRate() &&
        audioCoder.getFrameRate().getNumerator() == other.audioCoder.getFrameRate().getNumerator() &&
        audioCoder.getFrameRate().getDenominator() == other.audioCoder.getFrameRate().getDenominator() &&
        audioCoder.getChannels() == other.audioCoder.getChannels())))
      return false;
    if (videoCoder != other.videoCoder && !(videoCoder != null &&
        (videoCoder.getCodecID().swigValue() == other.videoCoder.getCodecID().swigValue() &&
        videoCoder.getWidth() == other.videoCoder.getWidth() &&
        videoCoder.getPixelType().swigValue() == other.videoCoder.getPixelType().swigValue() &&
        videoCoder.getFrameRate().getNumerator() == other.videoCoder.getFrameRate().getNumerator() &&
        videoCoder.getFrameRate().getDenominator() == other.videoCoder.getFrameRate().getDenominator() &&
        videoCoder.getTimeBase().getNumerator() == other.videoCoder.getTimeBase().getNumerator() &&
        videoCoder.getTimeBase().getDenominator() == other.videoCoder.getTimeBase().getDenominator())))
      return false;
    if (aStreamIndex != other.aStreamIndex && !(aStreamIndex != null && aStreamIndex.equals(other.aStreamIndex))) return false;
    if (vStreamIndex != other.vStreamIndex && !(vStreamIndex != null && vStreamIndex.equals(other.vStreamIndex))) return false;
    if (transportProtocol != other.transportProtocol) return false;
    if (transportMode != other.transportMode) return false;
    if (clientPorts.length != 0 && !Arrays.equals(clientPorts, other.clientPorts)) return false;
    if (serverPorts.length != 0 && !Arrays.equals(serverPorts, other.serverPorts)) return false;
    return true;
  }

  @Override
  public String toString() {
    String out = "";
    if (method != null) out += "Method: " + method + CRLF;
    if (rtspSeqNum != null) out += "CSeq: " + rtspSeqNum + CRLF;
    if (sessionNum != null) out += "Session: " + sessionNum + CRLF;
    if (errorCode != null) out += "Error Code: " + errorCode + CRLF;
    if (supportedMethods.length > 0) out += "Supported Methods: " + supportedMethods + CRLF;
    if (aStreamIndex != null) out += "Audio Stream Index: " + aStreamIndex + CRLF;
    if (vStreamIndex != null) out += "Video Stream Index: " + vStreamIndex + CRLF;
    if (audioCoder != null) out += "Audio Codec: " + audioCoder.getCodecID() + CRLF;
    if (videoCoder != null) out += "Video Codec: " + videoCoder.getCodecID() + CRLF;
    if (transportProtocol != null) out += "Transport Protocol: " + transportProtocol + CRLF;
    if (transportMode != null) out += "Transport Mode: " + transportMode + CRLF;
    if (clientPorts.length > 0) out += "Client Ports: " + clientPorts + CRLF;
    if (serverPorts.length > 0) out += "Server Ports: " + serverPorts + CRLF;
    if (contentLength != null) out += "Content Length: " + contentLength + CRLF;
    if (content != null) out += "Content: " + content + CRLF;
    if (rawData != null) out += rawData + CRLF;
    return out;
  }

  public Method method() {
    return method;
  }
  public Integer rtspSeqNum() {
    return rtspSeqNum;
  }
  public Integer sessionNum() {
    return sessionNum;
  }
  public ErrorCode errorCode() {
    return errorCode;
  }
  public String rawData() {
    return rawData;
  }
  public Method[] supportedMethods() {
    return supportedMethods;
  }
  public IStreamCoder audioCoder() {
    return audioCoder;
  }
  public IStreamCoder videoCoder() {
    return videoCoder;
  }
  public Integer aStreamIndex() {
    return aStreamIndex;
  }
  public Integer vStreamIndex() {
    return vStreamIndex;
  }
  public String content() {
    return content;
  }
  public Integer contentLength() {
    return contentLength;
  }
  public TransportProtocol transportProtocol() {
    return transportProtocol;
  }
  public Integer[] clientPorts() {
    return clientPorts;
  }
  public Integer[] serverPorts() {
    return serverPorts;
  }
  public TransportMode transportMode() {
    return transportMode;
  }
  public boolean isStarted() {
    return isStarted;
  }
  public boolean isDone() {
    return isDone;
  }
}
