package collage;

import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;

import javax.swing.*;

import com.xuggle.xuggler.IPacket;
import com.xuggle.xuggler.IStreamCoder;

public class Client {
  JFrame f = new JFrame("Client");
  JButton optionsButton = new JButton("Options");
  JButton describeButton = new JButton("Describe");
  JButton setupButton = new JButton("Setup");
  JButton playButton = new JButton("Play");
  JButton pauseButton = new JButton("Pause");
  JButton tearButton = new JButton("Teardown");
  JPanel controlPanel = new JPanel();
  ImageIcon icon;

  /* RTP variables */
  private int rtpPort = 25000; //port where the client will receive the RTP packets
  private ClientWorkerThread workerThread = null;
  
  /* RTSP variables */
  // RTSP states
  private static enum State {
    INIT, READY, PLAYING, CLOSED
  }
  private State rtspState;
  private Socket rtspSocket;     // socket used to send/receive RTSP messages
  private BufferedReader rtspReader;
  private BufferedWriter rtspWriter;
  private String filename; // video file to request to the server
  private Integer rtspSeqNum = 0;     // Sequence number of RTSP messages within the session
  private Integer rtspSessionNum = null;  // ID of the RTSP session (given by the RTSP Server)

  /* MediaStream variables */
  private IStreamCoder audioCoder = null;
  private IStreamCoder videoCoder = null;
  private int audioStreamIndex = -1;
  private int videoStreamIndex = -1;
  
  private BufferedIPacketDatagramInputStream iStream;
  
  private FakeDisp clientDisp;
  
  final static String CRLF = "\r\n";

  public Client(String serverHost, int rtspServerPort) throws IOException {
    //Frame
    f.addWindowListener(new WindowAdapter() {
       public void windowClosing(WindowEvent e) {
         System.exit(0);
       }
    });

    //Buttons
    controlPanel.setLayout(new GridLayout(2,3));
    controlPanel.add(optionsButton);
    controlPanel.add(describeButton);
    controlPanel.add(setupButton);
    controlPanel.add(playButton);
    controlPanel.add(pauseButton);
    controlPanel.add(tearButton);
    optionsButton.addActionListener(new optionsButtonListener());
    describeButton.addActionListener(new describeButtonListener());
    setupButton.addActionListener(new setupButtonListener());
    playButton.addActionListener(new playButtonListener());
    pauseButton.addActionListener(new pauseButtonListener());
    tearButton.addActionListener(new tearButtonListener());

    //frame layout
    controlPanel.setBounds(0,280,380,50);

    f.getContentPane().add(controlPanel, BorderLayout.CENTER);
//    f.setSize(new Dimension(280,380));
    f.setVisible(true);

    // Establish a TCP connection with the server to exchange RTSP messages
    InetAddress ServerIPAddr = InetAddress.getByName(serverHost);
    rtspSocket = new Socket(ServerIPAddr, rtspServerPort);

    // Set input and output stream filters:
    rtspReader = new BufferedReader(new InputStreamReader(rtspSocket.getInputStream()) );
    rtspWriter = new BufferedWriter(new OutputStreamWriter(rtspSocket.getOutputStream()) );
    
    clientDisp = new FakeDisp("Server", 0, 0, 500, 500);
    clientDisp.setRelative(false);
    
    rtpPort = CollageGlobal.rtpPort;
  }

  public boolean startStream(String filename) {
    // init RTSP state:
    rtspState = State.INIT;
    this.filename = filename;
    return true;
  }
  public void updateRTSPState(State newState) {
    rtspState = newState;
    System.out.println("New RTSP state: " + rtspState);
  }
  
  //------------------------------------
  //main
  //------------------------------------
  public static void main(String argv[]) throws Exception {
    if (argv.length < 3)
      throw new RuntimeException("Usage: <rtsp_server_host> <rtsp_server_port> <filename>");
    
    String serverHost = argv[0];
    int rtspServerPort = Integer.parseInt(argv[1]);
    String filename = argv[2];

    Client client = new Client(serverHost, rtspServerPort);
    client.startStream(filename);
  }


  class optionsButtonListener implements ActionListener{
    public void actionPerformed(ActionEvent e){
      System.out.println("Options Button pressed !");      

      if (rtspState == State.INIT) {
        rtspSeqNum = 1;
        sendRTSPRequest(RTSPPacket.Method.OPTIONS);

        try {
          RTSPResponsePacket response = getRTSPResponse();
          if (response.errorCode() != RTSPPacket.ERROR_CODE_OK)
            System.err.println("Error in response: " + response);
        } catch (IOException e1) {
          e1.printStackTrace();
          System.exit(0);
        }
      }
    }
  }
  
  class describeButtonListener implements ActionListener{
    public void actionPerformed(ActionEvent e){
      System.out.println("Describe Button pressed !");      

      if (rtspState == State.INIT) {
        rtspSeqNum = 1;
        sendRTSPRequest(RTSPPacket.Method.DESCRIBE);

        try {
          RTSPResponsePacket response = getRTSPResponse();
          if (response.errorCode() != RTSPPacket.ERROR_CODE_OK)
            System.err.println("Error in response: " + response);
          else if ((response.aStreamIndex() == null || response.audioCoder() == null) &&
              (response.vStreamIndex() == null || response.videoCoder() == null)) {
            System.err.println("Incomplete stream description: " + response);
          } else {
            audioStreamIndex = response.aStreamIndex();
            audioCoder = response.audioCoder();
            videoStreamIndex = response.vStreamIndex();
            videoCoder = response.videoCoder();
          }
        } catch (IOException e1) {
          e1.printStackTrace();
          System.exit(0);
        }
      }
    }
  }
  
  class setupButtonListener implements ActionListener{
    public void actionPerformed(ActionEvent e){
      System.out.println("Setup Button pressed !");      

      if (rtspState == State.INIT) {
        //Init non-blocking RTPsocket that will be used to receive data
        try {
          iStream = new BufferedIPacketDatagramInputStream(rtpPort);
          workerThread = new ClientWorkerThread();
          workerThread.start();
        } catch (IOException ioe) {
          ioe.printStackTrace();
          System.exit(0);
        }

        rtspSeqNum = 1;
        sendRTSPRequest(RTSPPacket.Method.SETUP);

        try {
          RTSPResponsePacket response = getRTSPResponse();
          if (response.errorCode() != RTSPPacket.ERROR_CODE_OK)
            System.err.println("Error in response: " + response);
          else if (response.sessionNum() == null) {
            System.err.println("No session number in SETUP response, try again: " + response);
          } else {
            updateRTSPState(State.READY);
            rtspSessionNum = response.sessionNum();
          }
        } catch (IOException e1) {
          e1.printStackTrace();
          System.exit(0);
        }
      }
    }
  }
  
  class playButtonListener implements ActionListener {
    public void actionPerformed(ActionEvent e){
    	System.out.println("Play Button pressed !"); 

      if (rtspState == State.READY) {
    	  rtspSeqNum++;
    	  sendRTSPRequest(RTSPPacket.Method.PLAY);

    	  try {
          RTSPResponsePacket response = getRTSPResponse();
          if (response.errorCode() != RTSPPacket.ERROR_CODE_OK)
            System.err.println("Error in response: " + response);
          else
            updateRTSPState(State.PLAYING);
        } catch (IOException e1) {
          e1.printStackTrace();
          System.exit(0);
        }
      }
    }
  }

  class pauseButtonListener implements ActionListener {
    public void actionPerformed(ActionEvent e){
      System.out.println("Pause Button pressed !");   

      if (rtspState == State.PLAYING) {
    	  rtspSeqNum++;
    	  sendRTSPRequest(RTSPPacket.Method.PAUSE);
	
    	  try {
          RTSPResponsePacket response = getRTSPResponse();
          if (response.errorCode() != RTSPPacket.ERROR_CODE_OK)
            System.err.println("Error in response: " + response);
          else
            updateRTSPState(State.READY);
        } catch (IOException e1) {
          e1.printStackTrace();
          System.exit(0);
        }
      }
    }
  }

  class tearButtonListener implements ActionListener {
    public void actionPerformed(ActionEvent e){
      System.out.println("Teardown Button pressed !");  

  	  rtspSeqNum++;
      sendRTSPRequest(RTSPPacket.Method.TEARDOWN);

      try {
        RTSPResponsePacket response = getRTSPResponse();
        if (response.errorCode() != RTSPPacket.ERROR_CODE_OK)
          System.err.println("Error in response: " + response);
        else {     
          updateRTSPState(State.CLOSED);
          System.exit(0);
        }
      } catch (IOException e1) {
        e1.printStackTrace();
        System.exit(0);
      }
    }
  }

  private class ClientWorkerThread extends Thread {
    public void run() {
      IPacket iPacket; 
      
      while (rtspState != Client.State.CLOSED) {
        while(rtspState == Client.State.PLAYING) {
          iPacket = iStream.getNextPacket();
        }
      }
    }
  }

  private RTSPResponsePacket getRTSPResponse() throws IOException {
    RTSPResponsePacket response = RTSPResponsePacket.make();
    while (!response.isDone())
      response.decode(rtspReader);
    return response;
  }
  private void sendRTSPRequest(RTSPPacket.Method method) {
    try {
      RTSPRequestPacket request = RTSPRequestPacket.encode(method, filename, rtspSeqNum, rtspSessionNum,
          null, new Integer[] {rtpPort}, null);
      rtspWriter.write(request.rawData());
      rtspWriter.flush();
    } catch (Exception e) {
      e.printStackTrace();
      System.exit(0);
    }
  }

}
