package collage;

import java.util.LinkedList;
import java.util.List;

import com.xuggle.xuggler.IAudioSamples;
import com.xuggle.xuggler.ICodec;
import com.xuggle.xuggler.IPacket;
import com.xuggle.xuggler.IStreamCoder;
import com.xuggle.xuggler.IVideoPicture;
import com.xuggle.xuggler.IVideoResampler;

public class Modifier {

  private IStreamCoder audioCoder;
  private IStreamCoder videoCoder;
  
  IVideoResampler resampler = null;

  public Modifier(IStreamCoder audioCoder, IStreamCoder videoCoder) {
    this.audioCoder = audioCoder;
    this.videoCoder = videoCoder;
  }
  
  // A transformed audio packet could result in more than one packet 
  public List<IPacket> processPacket(IPacket packet, IStreamCoder inCoder) {
    List<IPacket> out = new LinkedList<IPacket>();

    if (inCoder.getCodecType() == ICodec.Type.CODEC_TYPE_AUDIO)
      return processAudioPacket(packet, inCoder);
    else if (inCoder.getCodecType() == ICodec.Type.CODEC_TYPE_VIDEO)
      return processVideoPacket(packet, inCoder);

    return out;
  }

  private List<IPacket> processVideoPacket(IPacket packet, IStreamCoder inCoder) {
    List<IPacket> out = new LinkedList<IPacket>();
    IPacket tmpPacket;
    int offset = 0;
    int numEncoded = 0, bytesDecoded = 0;
    IVideoPicture outFrame = null;
    IVideoPicture resFrame = IVideoPicture.make(videoCoder.getPixelType(),
        videoCoder.getWidth(), videoCoder.getHeight());
    IVideoPicture inFrame = IVideoPicture.make(inCoder.getPixelType(),
        inCoder.getWidth(), inCoder.getHeight());
    tmpPacket = IPacket.make();
    while (offset < packet.getSize()) {
      bytesDecoded = inCoder.decodeVideo(inFrame, packet, 0);
      if (bytesDecoded <= 0)
        throw new RuntimeException("Error decoding video packet");
      offset += bytesDecoded;
      
      if (inFrame.isComplete()) {
        if ( videoCoder.getWidth() != inCoder.getWidth() ||
            videoCoder.getHeight() != inCoder.getHeight() ||
            videoCoder.getPixelType() != inCoder.getPixelType() ) {
          resampler = IVideoResampler.make(
              videoCoder.getWidth(), videoCoder.getHeight(), videoCoder.getPixelType(),
              inCoder.getWidth(), inCoder.getHeight(), inCoder.getPixelType());
          if (resampler == null)
            throw new RuntimeException("Could not create resampler for video packet");
          if (resampler.resample(resFrame, inFrame) < 0)
            throw new RuntimeException("could not resample video packet");
          outFrame = resFrame;
        } else {
          outFrame = inFrame;
        }
    numEncoded = videoCoder.encodeVideo(tmpPacket, resPic, -1);
    if (numEncoded < 0)
      throw new RuntimeException("Error encoding video");
    out.add(tmpPacket);
    return out;
  }
  private List<IPacket> processAudioPacket(IPacket packet, IStreamCoder inCoder) {
    List<IPacket> out = new LinkedList<IPacket>();
    IPacket tmpPacket = IPacket.make();
    int samplesEncoded = 0, bytesDecoded = 0;
    if (inCoder.getCodecType() != ICodec.Type.CODEC_TYPE_AUDIO)
      return out;

    IAudioSamples samples = IAudioSamples.make(1024, inCoder.getChannels());
    int offset = 0, lastPos = 0;
    // continuously call decodeAudio until all samples have been decoded
    while(offset < packet.getSize()) {
      tmpPacket = IPacket.make();
      bytesDecoded = inCoder.decodeAudio(samples, packet, offset);
      if (bytesDecoded < 0)
        throw new RuntimeException("Error decoding audio packet");
      offset += bytesDecoded;
      if (samples.isComplete()) {
        int samplesConsumed = 0;
        // continuously call encodeAudio in case the samples must be in more than one packet
        while (samplesConsumed < samples.getNumSamples()) {
          samplesEncoded = audioCoder.encodeAudio(tmpPacket, samples, samplesConsumed);
          if (samplesEncoded <= 0)
            throw new RuntimeException("Error encoding audio");
          samplesConsumed += samplesEncoded;
          if (tmpPacket.isComplete()) {
            tmpPacket.setPosition(lastPos);
            lastPos += tmpPacket.getSize();
            out.add(tmpPacket);
          }
        }
      }
    }
    return out;
  }
}
