package collage;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.ParseException;

public class RTSPRequestPacket extends RTSPPacket {
  private Method method = null;
  private Integer rtspSeqNum = null;
  private Integer sessionNum = null;
  private String url = null;

  private String rawData = null;
  
  // Transport
  private TransportProtocol transportProtocol = TransportProtocol.RTP;
  private Integer[] clientPorts = {};
  private TransportMode transportMode = TransportMode.MULTICAST;
  
  private boolean isStarted = false;
  private boolean isDone = false;

  protected RTSPRequestPacket() {}
  
  public static RTSPRequestPacket make() {
    return new RTSPRequestPacket();
  }
  public static RTSPRequestPacket encode(Method reqType, String url, Integer rtspSeqNum, Integer sessionNum) throws IllegalArgumentException {
    RTSPRequestPacket packet = new RTSPRequestPacket();
    packet.method = reqType;
    packet.rtspSeqNum = rtspSeqNum;
    packet.sessionNum = sessionNum;
    packet.url = url;
    
    packet.encode();
    
    return packet;
  }
  /**
   * @param method the request method
   * @param url descriptor for media source
   * @param rtspSeqNum request/response pair sequence number
   * @param sessionNum RTSP Session number, null if n/a
   * @param transportProtocol <code>null</code> if don't care
   * @param clientPorts <code>null</code> if don't care
   * @param transportMode <code>null</code> if don't care
   * @return the encoded <code>RTSPRequestPacket</code>
   * @throws IllegalArgumentException
   */
  public static RTSPRequestPacket encode(Method method, String url, Integer rtspSeqNum, Integer sessionNum,
      TransportProtocol transportProtocol, Integer[] clientPorts, TransportMode transportMode) throws IllegalArgumentException {
    RTSPRequestPacket packet = new RTSPRequestPacket();
    packet.method = method;
    packet.rtspSeqNum = rtspSeqNum;
    packet.sessionNum = sessionNum;
    packet.url = url;
    if (transportProtocol != null) packet.transportProtocol = transportProtocol;
    if (clientPorts != null) packet.clientPorts = clientPorts;
    if (transportMode != null) packet.transportMode = transportMode;
    
    packet.encode();
    
    return packet;
  }
  
  public static void main(String argv[]) throws Exception {
    if (argv.length < 1)
      throw new RuntimeException("Usage: <filename>");
    String url = argv[0];
    url = URLEncoder.encode(url, "UTF-8");
    RTSPRequestPacket request = RTSPRequestPacket.encode(Method.OPTIONS, url, 0, null);
    RTSPRequestPacket decoded = RTSPRequestPacket.make();
    StringReader stringReader = new StringReader(request.rawData());
    BufferedReader reader = new BufferedReader(stringReader);
    while (!decoded.isDone())
      decoded.decode(reader);
  }
  
  private void decodeMethod(String line) throws ParseException {
    String[] tokens = line.split("\\s+");
    if (tokens.length != 3)
      throw new ParseException("Invalid method line: " + line, 0);

    method = Method.valueOf(tokens[0]);
    try {
      url = URLDecoder.decode(tokens[1],CHAR_ENCODING);
    } catch (UnsupportedEncodingException e) {
      throw new ParseException("Incorrectly encoded url: " + tokens[1], 0);
    }
    if (tokens[2] != RTSP_VERSION)
      throw new IllegalArgumentException("Unsupported RTSP Version: " + tokens[2]);
  }
  private void decodeSeqNum(String line) throws ParseException {
    String[] tokens = line.split("\\s+");
    if (tokens.length != 2)
      throw new ParseException("Invalid sequence num line: " + line, 0);
    
    try {
      rtspSeqNum = Integer.parseInt(tokens[1]);
    } catch (NumberFormatException e) {
      throw new ParseException("Invalid sequence num: " + tokens[1], 0);
    }
  }
  private void decodeSessionNum(String line) throws ParseException {
    String[] tokens = line.split("\\s+");
    if (tokens.length != 2)
      throw new ParseException("Invalid session num line: " + line, 0);
    
    try {
      sessionNum = Integer.parseInt(tokens[1]);
    } catch (NumberFormatException e) {
      throw new ParseException("Invalid session num: " + tokens[1], 0);
    }
  }
  public void decodeTransport(String line) throws ParseException {
    String[] tokens = line.split(":",2);
    if (tokens.length != 2)
      throw new ParseException("Invalid transport line: " + line, 0);
    String[] params = tokens[1].split(";");
    for (int i=0; i<params.length; i++) {
      boolean found = false;
      if (params[1].contains("client_port")) {
        String[] paramPair = params[i].split("=");
        if (paramPair.length != 2)
          throw new ParseException("Invalid param in transport line: " + params[i], 0);
        paramPair = paramPair[1].split("-");
        clientPorts = new Integer[paramPair.length];
        for (int j=0; j<paramPair.length; j++)
          clientPorts[j] = Integer.parseInt(paramPair[j]);
        found = true;
      } else {
        for (int j=0; j<TransportProtocol.values().length; j++)
          if (TransportProtocol.values()[j].name() == params[1]) {
            transportProtocol = TransportProtocol.values()[j];
            found = true;
          }
        for (int j=0; j<TransportMode.values().length; j++)
          if (TransportMode.values()[j].rtspName() == params[1]) {
            transportMode = TransportMode.values()[j];
            found = true;
          }
      }
      if (!found)
        throw new ParseException("Unknown transport parameter: " + params[1], 0);
    }
  }
  public void decode(String line) throws ParseException {
    if (!isStarted) {
      decodeMethod(line);
      isStarted = true;
      return;
    }
    String[] pair = line.split(":",2);
    if (pair.length != 2)
      throw new IllegalArgumentException("Invalid header line: " + line);
    switch (pair[1]) {
    case "CSeq":
      decodeSeqNum(line);
      break;
    case "Session":
      decodeSessionNum(line);
      break;
    default:
      throw new IllegalArgumentException("Unsupported header type: " + pair[1]);
    }
  }
  public void decode(BufferedReader reader) throws IOException, ParseException {
    if (isDone)
      throw new RuntimeException("Packet already complete");
    String line = reader.readLine();
    decode(line);
  }
  
  private String encodeMethod() {
    return method.toString() + " " + url + " " + RTSP_VERSION + CRLF;
  }
  private String encodeSeqNum() {
    return "CSeq: " + rtspSeqNum + CRLF;
  }
  private String encodeSessionNum() {
    String ret = "";
    if (sessionNum != null)
      ret = "Session: " + sessionNum + CRLF;
    return ret;
  }
  private String encodeTransport() {
    String ret = "";
    if (transportProtocol != null || clientPorts.length > 0 || transportMode != null) {
      ret += "Transport: ";
      if (transportProtocol != null) {
        for (int i=0; i<TransportProtocol.values().length-1; i++)
          ret += TransportProtocol.values()[i] + "/";
        ret += TransportProtocol.values()[TransportProtocol.values().length-1] + ";";
      }
      if (clientPorts.length > 0) {
        ret += "client_port=" + clientPorts[0];
        if (clientPorts.length > 1)
          ret += "-" + clientPorts[1] + ";";
      }
      if (transportMode != null) {
        ret += transportMode.rtspName() + ";";
      }
      ret += CRLF;
    }
    return ret;
  }
  private void encode() {
    String encodedPacket = "";
    encodedPacket += encodeMethod();
    encodedPacket += encodeSeqNum();
    encodedPacket += encodeSessionNum();
    encodedPacket += encodeTransport();
    this.rawData = encodedPacket;
  }
  
  public Method reqType() {
    return method;
  }
  public Integer rtspSeqNum() {
    return rtspSeqNum;
  }
  public Integer sessionNum() {
    return sessionNum;
  }
  public String url() {
    return url;
  }
  public String rawData() {
    return rawData;
  }
  public boolean isStarted() {
    return isStarted;
  }
  public boolean isDone() {
    return isDone;
  }
}
