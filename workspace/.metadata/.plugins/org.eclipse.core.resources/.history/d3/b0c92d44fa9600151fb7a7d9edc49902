package collage;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.awt.event.*;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.Timer;

import com.xuggle.xuggler.IStreamCoder;

import collage.FakeDisp;
import collage.IVideoPictureWrapper;
import collage.MediaStream;
import collage.RTPpacket;

public class RTSPServer {
  /* RTP variables */
  DatagramSocket rtpSocket; //socket to be used to send and receive UDP packets
  DatagramPacket oPacket; //UDP packet containing the video frames
  static int JPEG_TYPE = 26; //RTP payload type for JPEG type

  InetAddress ClientIPAddr; //Client IP address
  int rtpClientPort = -1; //destination port for RTP packets  (given by the RTSP Client)

  /* Stream variables */
  private MediaStream mediaStream;
  private int[] currStreamPacketIdx; // current sent packet index for each stream 
  

  private byte[] buf; // buffer used to store the images to send to the client 

  public static enum STATE {
    INIT, READY, PLAYING;
  }
  // Check 7.1.1 Status Codes
  // handles only requests, which can be decoded entirely without a Session #
  // if DESCRIBE, no new session, send response
  // if OPTIONS, no new session, send response
  // if SETUP with no existing session, create new session, call receivedRTSPRequest
  // if SETUP, PLAY, PAUSE with existing session, call receivedRTSPRequest
  // if TEARDOWN, close existing session, or return error if session doesn't exist 
  /* RTSP variables */
  static int RTSP_SESSION_ID = 123456; //ID of the RTSP session
  // RTSP states
  final static int INIT = 0;
  final static int READY = 1;
  final static int PLAYING = 2;

  private HashMap<Integer, STATE> rtspStates;
  private HashMap<Integer, RTSPServerSession> rtpSessions;
  
  private Socket rtspSocket; // socket used to send/receive RTSP messages

  static BufferedReader rtspBufferedReader = null;
  static BufferedWriter rtspBufferedWriter = null;
  static String filename = null; //video file requested from the client
  int rtspSeqNum = 0; //Sequence number of RTSP messages within the session
  
  final static String CRLF = "\r\n";

  private FakeDisp disp;
  private FakeSpeaker speaker;

  public RTSPServer() throws SocketException {
    disp = new FakeDisp("Server",0,0,500,500);
    mediaStream = new MediaStream();
    rtpSocket = new DatagramSocket();
    
    buf = new byte[15000]; 
  }
          
  //------------------------------------
  //main
  //------------------------------------
  public static void main(String argv[]) throws Exception
  {
    RTSPServer theServer = new RTSPServer();

    int rstpPort = Integer.parseInt(argv[0]);
   
    // Initiate TCP connection with the client for the RTSP session
    ServerSocket listenSocket = new ServerSocket(rstpPort);
    theServer.rtspSocket = listenSocket.accept();
    listenSocket.close();

    //Get Client IP address
    theServer.ClientIPAddr = theServer.rtspSocket.getInetAddress();

    //Initiate RTSPstate
    rtspState = INIT;

    //Set input and output stream filters:
    rtspBufferedReader = new BufferedReader(new InputStreamReader(theServer.rtspSocket.getInputStream()) );
    rtspBufferedWriter = new BufferedWriter(new OutputStreamWriter(theServer.rtspSocket.getOutputStream()) );

    //Wait for the SETUP message from the client
    int request_type;
    boolean done = false;
    while(!done) {
      request_type = theServer.parse_RTSP_request(); //blocking
      if (request_type == SETUP) {
        done = true;
        rtspState = READY;
        System.out.println("New RTSP state: READY");
   
        theServer.sendRTSPResponse();
  	  }
    }

    //loop to handle RTSP requests
    while(true)
    {
    	//parse the request
    	request_type = theServer.parse_RTSP_request(); //blocking
    	    
    	if ((request_type == PLAY) && (rtspState == READY))
  	  {
  	    theServer.sendRTSPResponse();
  	    rtspState = PLAYING;
  	    System.out.println("New RTSP state: PLAYING");
  	  }
    	else if ((request_type == PAUSE) && (rtspState == PLAYING))
    	{
  	    theServer.sendRTSPResponse();
  	    rtspState = READY;
  	    System.out.println("New RTSP state: READY");
  	  }
    	else if (request_type == TEARDOWN)
  	  {
  	    theServer.sendRTSPResponse();
  	    theServer.rtspSocket.close();
  	    theServer.rtpSocket.close();
  
  	    System.exit(0);
  	  }
    }
  }


  //------------------------
  //Handler for timer
  //------------------------
  public void actionPerformed(ActionEvent e) {
    //update current imagenb
    imagenb++;
     
  	try {
  	  //get next frame to send from the video, as well as its size
  	  IVideoPictureWrapper frame = null;
  
  	  //Builds an RTPpacket object containing the frame
  	  RTPpacket rtp_packet = new RTPpacket(JPEG_TYPE, imagenb, (int)frame.iVideoPicture().getTimeStamp(), frame.byteArray(), frame.byteArray().length);
  	  
  	  //get to total length of the full rtp packet to send
  	  int packet_length = rtp_packet.getlength();
  
  	  //retrieve the packet bitstream and store it in an array of bytes
  	  byte[] packet_bits = new byte[packet_length];
  	  rtp_packet.getpacket(packet_bits);
  
  	  //send the packet as a DatagramPacket over the UDP socket 
  	  oPacket = new DatagramPacket(packet_bits, packet_length, ClientIPAddr, rtpClientPort);
  	  rtpSocket.send(oPacket);
  
  	  //print the header bitstream
  	  rtp_packet.printheader();
  
  	  //update GUI
  	  disp.updateFull(frame.bufferedImage());
  	  System.out.println("Send frame #" + imagenb + " of length " + oPacket.getLength());
      System.out.println(Arrays.toString(Arrays.copyOfRange(packet_bits, 0, 30)));

//      RTPpacket clientPacket = new RTPpacket(senddp.getData(), senddp.getLength());
//      int payload_length = clientPacket.getpayload_length();
//      byte [] payload = new byte[payload_length];
//      clientPacket.getpayload(payload);
//      ByteArrayInputStream clientIn = new ByteArrayInputStream(payload);
//      BufferedImage image = ImageIO.read(clientIn);
//      clientDisp.updateFull(image);
  	}
  	catch(Exception ex)
	  {
	    System.out.println("Exception caught: "+ex);
	    System.exit(0);
	  }
  }

  //------------------------------------
  //Parse RTSP Request
  //------------------------------------
  private int parse_RTSP_request()
  {
    int request_type = -1;
    try {
      // parse request line and extract the request_type:
      String RequestLine = rtspBufferedReader.readLine();
      System.out.println("RTSP Server - Received from Client:");
      System.out.println(RequestLine);

      StringTokenizer tokens = new StringTokenizer(RequestLine);
      Matcher m = Pattern.compile("([^\"]\\S*|\".+?\")\\s*").matcher(RequestLine);
      m.find();
//      String request_type_string = m.group(1);
      String request_type_string = tokens.nextToken();

      //convert to request_type structure:
      if ((new String(request_type_string)).compareTo("SETUP") == 0)
        request_type = SETUP;
      else if ((new String(request_type_string)).compareTo("PLAY") == 0)
        request_type = PLAY;
      else if ((new String(request_type_string)).compareTo("PAUSE") == 0)
        request_type = PAUSE;
      else if ((new String(request_type_string)).compareTo("TEARDOWN") == 0)
        request_type = TEARDOWN;

      if (request_type == SETUP) {
    	  m.find();
    	  filename = m.group(1);
    	  filename = filename.substring(1, filename.length()-1);
    	  mediaStream.queueStream(new BufferedIPacketFileInputStream(filename));
      }

      //parse the SeqNumLine and extract CSeq field
      String SeqNumLine = rtspBufferedReader.readLine();
      System.out.println(SeqNumLine);
      tokens = new StringTokenizer(SeqNumLine);
      tokens.nextToken();
      rtspSeqNum = Integer.parseInt(tokens.nextToken());
	
      //get LastLine
      String lastLine = rtspBufferedReader.readLine();
      System.out.println(lastLine);

      if (request_type == SETUP) {
    	  String[] parameters = lastLine.split(";");
    	  for (int i=0; i<parameters.length; i++) {
    	    String[] pair = parameters[i].split("=");
    	    if (pair[0] == "rtpClientPort")
            rtpClientPort = Integer.parseInt(pair[1]);
    	  }
    	}
    }
    catch(Exception ex)
    {
      System.out.println("Exception caught: "+ex);
      System.exit(0);
    }
    return(request_type);
  }

  //------------------------------------
  //Send RTSP Response
  //------------------------------------
  // return "501 Not Implemented" if not implemented type
  private void sendRTSPResponse() throws IOException {
    String params = "";
    IStreamCoder audioDecoder = mediaStream.getAudioDecoder();
    IStreamCoder videoDecoder = mediaStream.getVideoDecoder();
    params += "aStreamIndex=" + mediaStream.getAudioStreamId();
    params += "aCodecId="     + audioDecoder.getCodecID().swigValue();
    params += "aSampleRate="  + audioDecoder.getSampleRate();
    params += "aChannels="    + audioDecoder.getChannels();
    params += "vStreamIndex=" + mediaStream.getVideoStreamId();
    params += "vCodecId="     + videoDecoder.getCodecID().swigValue();
    params += "vWidth="       + videoDecoder.getWidth();
    params += "vHeight="      + videoDecoder.getHeight();
    params += "vPixelType="   + videoDecoder.getPixelType().swigValue();
    params += "vTimeBase="    + videoDecoder.getTimeBase().getValue();

    RTSPResponsePacket resp;
    // FIXME: implement this, need RTSPRequestPacket to be implemented
    resp = new RTSPResponsePacket(RTSPResponsePacket.Method.DESCRIBE, 
        RTSPResponsePacket.ERROR_CODE_OK, rtspSeqNum);
    rtspBufferedWriter.write(resp.getData());
    
    rtspBufferedWriter.write("RTSP/1.0 200 OK" + CRLF);
    rtspBufferedWriter.write("CSeq: " + rtspSeqNum + CRLF);
    rtspBufferedWriter.write("Session: " + RTSP_SESSION_ID + CRLF);
    rtspBufferedWriter.write("Params: " + params + CRLF);
    rtspBufferedWriter.flush();
  }
}