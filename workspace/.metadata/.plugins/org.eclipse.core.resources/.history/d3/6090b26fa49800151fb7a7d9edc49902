package collage;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.imageio.ImageIO;
import javax.sound.sampled.LineUnavailableException;

import com.xuggle.xuggler.Global;
import com.xuggle.xuggler.IAudioSamples;
import com.xuggle.xuggler.ICodec;
import com.xuggle.xuggler.IMetaData;
import com.xuggle.xuggler.IPacket;
import com.xuggle.xuggler.IStreamCoder;
import com.xuggle.xuggler.IVideoPicture;
import com.xuggle.xuggler.video.ConverterFactory;
import com.xuggle.xuggler.video.IConverter;

public class MediaStream
{
  private Queue<IPacketCodableInputStream> streams = new LinkedList<IPacketCodableInputStream>();
  private Lock streamLock = new ReentrantLock();
  
  int frameNum = 0;
  long streamStartTimestamp;
  long curTimestamp = 0;
  private CollageGlobal.QUALITY quality = CollageGlobal.QUALITY.MEDIUM;
  
  private int inAudioStreamId = -1;
  private int inVideoStreamId = -1;
  private int outAudioStreamId = 1;
  private int outVideoStreamId = 0;
  
  // FIXME: set these correctly if not using Modifier
  private IStreamCoder audioDecoder;
  private IStreamCoder videoDecoder;
  private IStreamCoder audioEncoder;
  private IStreamCoder videoEncoder;
  
  private static long mFirstVideoTimestampInStream = Global.NO_PTS;
  private static long mSystemVideoClockStartTime = 0;
  
  static FakeDisp serverDisp;
  static FakeSpeaker serverSpeaker;
  
  public MediaStream() {
    if (!setupAudio())
      throw new RuntimeException("Failed to setup audio");
    if (!setupVideo())
      throw new RuntimeException("Failed to setup video");
  }
  
  private boolean setupVideo() {
    videoEncoder = IStreamCoder.make(IStreamCoder.Direction.ENCODING, ICodec.findEncodingCodec(CollageGlobal.videoCodecID));
    if (videoEncoder == null)
      return false;
    videoEncoder.setWidth(quality.width());
    videoEncoder.setHeight(quality.height());
    videoEncoder.setPixelType(CollageGlobal.videoPixelFormatType);
    videoEncoder.setTimeBase(CollageGlobal.videoTimeBase);
    if (videoEncoder.open(null, null) < 0)
      System.err.println("Error opening video coder");

    videoDecoder = IStreamCoder.make(IStreamCoder.Direction.DECODING, ICodec.findDecodingCodec(CollageGlobal.videoCodecID));
    if (videoEncoder == null)
      return false;
    videoDecoder.setWidth(quality.width());
    videoDecoder.setHeight(quality.height());
    videoDecoder.setPixelType(CollageGlobal.videoPixelFormatType);
    videoDecoder.setTimeBase(CollageGlobal.videoTimeBase);
    if (videoDecoder.open(IMetaData.make(), IMetaData.make()) < 0)
      System.err.println("Error opening video coder");
    
    serverDisp = new FakeDisp("Server", 0, 0, videoEncoder.getWidth(), videoEncoder.getHeight());
    serverDisp.setRelative(false);
    return true;
  }
  private boolean setupAudio() {
    audioEncoder = IStreamCoder.make(IStreamCoder.Direction.ENCODING, ICodec.findEncodingCodec(CollageGlobal.audioCodecID));
    if (audioEncoder == null)
      return false;
    audioEncoder.setSampleRate(CollageGlobal.audioSampleRate);
    audioEncoder.setChannels(2);
    if (audioEncoder.open(IMetaData.make(), IMetaData.make()) < 0)
      System.err.println("Error opening audio coder");

    audioDecoder = IStreamCoder.make(IStreamCoder.Direction.DECODING, ICodec.findDecodingCodec(CollageGlobal.audioCodecID));
    if (audioDecoder == null)
      return false;
    audioDecoder.setSampleRate(CollageGlobal.audioSampleRate);
    audioDecoder.setChannels(2);
    if (audioDecoder.open(IMetaData.make(), IMetaData.make()) < 0)
      System.err.println("Error opening audio coder");

    try {
      serverSpeaker = new FakeSpeaker(
          audioEncoder.getSampleRate(), 
          (int)IAudioSamples.findSampleBitDepth(audioEncoder.getSampleFormat()),
          audioEncoder.getChannels());
    } catch (LineUnavailableException e) {
      return false;
    }
    return true;
  }
  
  public static void main(String[] argv) throws Exception {
	  if (argv.length <= 0)
	      throw new IllegalArgumentException("must pass in a filename as the first argument");
	  
	  String filename = argv[0];
	  MediaStream mediaStream = new MediaStream();
	  IPacketCodableInputStream inputStream = new BufferedIPacketFileInputStream(filename);
	  IPacketCodableInputStream modifier = new Modifier(inputStream,
        mediaStream.audioEncoder, mediaStream.videoEncoder,
        mediaStream.audioDecoder, mediaStream.videoDecoder);
    mediaStream.queueStream(inputStream);
//    mediaStream.queueStream(modifier);
	  
	  IVideoPicture picture = null;
	  IAudioSamples samples = null;
	  while (!mediaStream.isDone()) {
	    long frameStart = System.currentTimeMillis();
      IPacket packet = mediaStream.getNextPacket();
      System.out.println("MediaStream read packet: " + packet);
      IStreamCoder decoder = mediaStream.getActiveInputStream().getStreamDecoder(packet);
      if (packet.getStreamIndex() == mediaStream.outVideoStreamId) {
        if (picture == null)
          picture = IVideoPicture.make(decoder.getPixelType(), decoder.getWidth(), decoder.getHeight());
        IConverter converter = ConverterFactory.createConverter(
            ConverterFactory.XUGGLER_BGR_24, decoder.getPixelType(), decoder.getWidth(), decoder.getHeight());

        decoder.decodeVideo(picture, packet, 0);
        System.out.println("MediaStream decoded video: " + picture);
        if (picture.isComplete()) {
          BufferedImage nextImg = converter.toImage(picture);
          serverDisp.updateFull(nextImg);
          long delay = millisecondsUntilTimeToDisplay(picture);
          try {
            if (delay > 0)
              Thread.sleep(delay);
          } catch (InterruptedException e) {
            return;
          }
          picture = null;
        }
        System.out.println((System.currentTimeMillis()-frameStart) + " ms to D");
      } else if (packet.getStreamIndex() == mediaStream.outAudioStreamId) {
        if (samples == null)
          samples = IAudioSamples.make(1024, decoder.getChannels());
        int offset = 0;
        while(offset < packet.getSize())
        {
          int bytesDecoded = decoder.decodeAudio(samples, packet, offset);
          if (bytesDecoded < 0)
            throw new RuntimeException("got error decoding audio in: " + filename);
          System.out.println("MediaStream decoded audio: " + samples);
          offset += bytesDecoded;
          if (samples.isComplete()) {
            serverSpeaker.play(samples);
            samples = null;
          }
        }
      }
      // --------------------
      // Client 
      // --------------------
//      System.out.println((System.currentTimeMillis()-frameStart) + " ms to H");
//      ByteArrayInputStream clientIn = new ByteArrayInputStream(nextPic.byteArray());
//      BufferedImage clientImage = ImageIO.read(clientIn);
//      stream.clientDisp.updateFull(clientImage);
  }
	  
  }

  public boolean isDone() {
    return getActiveInputStream() == null;
  }

  public void queueStream(IPacketCodableInputStream stream) {
    streamLock.lock();
    streams.add(stream);
    startTopInputStream();
    streamLock.unlock();
  }
  
  public IPacketCodableInputStream getActiveInputStream() {
    streamLock.lock();
    IPacketCodableInputStream active = streams.peek();
    while ((active != null) && active.isDone()) {
      streams.remove();
      if (streams.isEmpty()) {
        active = null;
        break;
      }
      active = streams.peek();
      if (active != null)
        startTopInputStream();
    };
    streamLock.unlock();
    return active;
  }

  private void startTopInputStream() {
    streamLock.lock();
    IPacketCodableInputStream active = streams.peek();
    if (!active.isStarted()) {
      inAudioStreamId = -1;
      inVideoStreamId = -1;
      for (int i=0; i<active.getNumStreams(); i++) {
        IStreamCoder coder = active.getStreamEncoder(i);
        if ((coder.getCodecType() == ICodec.Type.CODEC_TYPE_AUDIO) && (inAudioStreamId == -1)) {
          inAudioStreamId = i;
        } else if ((coder.getCodecType() == ICodec.Type.CODEC_TYPE_VIDEO) && (inVideoStreamId == -1)) {
          inVideoStreamId = i;
        }
      }
      streamStartTimestamp = System.currentTimeMillis();
      active.start();
    }
    streamLock.unlock();
  }

  public IPacket getNextPacket() {
    IPacketInputStream stream = getActiveInputStream();
    if (stream == null)
      return null;
    IPacket packet = stream.getNextPacket();
    if (packet == null)
      return null;
    if (packet.getStreamIndex() == inAudioStreamId)
      packet.setStreamIndex(outAudioStreamId);
    else if (packet.getStreamIndex() == inVideoStreamId)
      packet.setStreamIndex(outVideoStreamId);
    return packet;
  }
  
  private static long millisecondsUntilTimeToDisplay(IVideoPicture picture)
  {
    long millisecondsToSleep = 0;
    if (mFirstVideoTimestampInStream == Global.NO_PTS)
    {
      // This is our first time through
      mFirstVideoTimestampInStream = picture.getTimeStamp();
      // get the starting clock time so we can hold up frames
      // until the right time.
      mSystemVideoClockStartTime = System.currentTimeMillis();
      millisecondsToSleep = 0;
    } else {
      long systemClockCurrentTime = System.currentTimeMillis();
      long millisecondsClockTimeSinceStartofVideo = systemClockCurrentTime - mSystemVideoClockStartTime;
      // compute how long for this frame since the first frame in the stream.
      // remember that IVideoPicture and IAudioSamples timestamps are always in MICROSECONDS,
      // so we divide by 1000 to get milliseconds.
      long millisecondsStreamTimeSinceStartOfVideo = (picture.getTimeStamp() - mFirstVideoTimestampInStream)/1000;
      final long millisecondsTolerance = 10; // and we give ourselfs 50 ms of tolerance
      millisecondsToSleep = (millisecondsStreamTimeSinceStartOfVideo -
          (millisecondsClockTimeSinceStartofVideo+millisecondsTolerance));
    }
    return millisecondsToSleep;
  }
  
  public int getVideoStreamId() {
    return outVideoStreamId;
  }
  public int getAudioStreamId() {
    return outAudioStreamId;
  }
  public IStreamCoder getAudioDecoder() {
    return audioDecoder;
  }
  public IStreamCoder getVideoDecoder() {
    return videoDecoder;
  }
  public IStreamCoder getAudioEncoder() {
    return audioEncoder;
  }
  public IStreamCoder getVideoEncoder() {
    return videoEncoder;
  }
}