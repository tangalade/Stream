package collage;

import com.xuggle.xuggler.IStreamCoder;

public class RTSPResponsePacket {
  public static enum REQUEST {
    OPTIONS, DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE
  }
  public static final int ERROR_CODE_OK = 200;
  private final String CRLF = "\r\n";

  private int errorCode;
  private int rtspSeqNum;
  private int sessionNum;
  private REQUEST reqType;
  private String packet;
  
  private MediaStream mediaStream = null;
  
  public RTSPResponsePacket(REQUEST reqType, int errorCode, int rtspSeqNum) {
    this.reqType = reqType;
    this.errorCode = errorCode;
    this.rtspSeqNum = rtspSeqNum;
    this.packet = encode();
  }
  
  public RTSPResponsePacket(REQUEST reqType, int errorCode, int rtspSeqNum, MediaStream mediaStream) { 
    this.reqType = reqType;
    this.errorCode = errorCode;
    this.rtspSeqNum = rtspSeqNum;
    this.mediaStream = mediaStream;
    this.packet = encode();
  }
  
  private String encodeStatus() {
    return "RTSP/1.0 " + errorCode + " OK" + CRLF;
  }
  private String encodeSeqNum() {
    return "CSeq: " + rtspSeqNum + CRLF;
  }
  private String encodeSessionNum() {
    String ret = "";
    if (reqType != REQUEST.OPTIONS && reqType != REQUEST.DESCRIBE)
      ret = "Session: " + sessionNum;
    return ret;
  }
  private String encode() {
    String encodedPacket = "";
    int contentLength = 0;
    String content = "";

    encodedPacket += encodeStatus();
    encodedPacket += encodeSeqNum();
    switch (reqType) {
    case OPTIONS:
      content += "Public: DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE";
      break;
    case DESCRIBE:
      if (mediaStream == null)
        throw new IllegalArgumentException("null mediaStream");
      IStreamCoder audioDecoder = mediaStream.getAudioDecoder();
      IStreamCoder videoDecoder = mediaStream.getVideoDecoder();
      int aStreamIndex = mediaStream.getVideoStreamId();
      int vStreamIndex = mediaStream.getVideoStreamId();
      if (audioDecoder != null && aStreamIndex != -1) {
        content += "aStreamIndex=" + mediaStream.getAudioStreamId();
        content += "aCodecId="     + audioDecoder.getCodecID().swigValue();
        content += "aSampleRate="  + audioDecoder.getSampleRate();
        content += "aChannels="    + audioDecoder.getChannels();
      };
      if (videoDecoder != null && vStreamIndex != -1) {
        content += "vStreamIndex=" + mediaStream.getVideoStreamId();
        content += "vCodecId="     + videoDecoder.getCodecID().swigValue();
        content += "vWidth="       + videoDecoder.getWidth();
        content += "vHeight="      + videoDecoder.getHeight();
        content += "vPixelType="   + videoDecoder.getPixelType().swigValue();
        content += "vTimeBase="    + videoDecoder.getTimeBase().getValue();
      }
      break;
    }
    contentLength += content.length();
    return encodedPacket;
  }

  public static class OPTIONS {
    public OPTIONS(int errorCode, int rtspSeqNum) {
      
    }
  }
}
