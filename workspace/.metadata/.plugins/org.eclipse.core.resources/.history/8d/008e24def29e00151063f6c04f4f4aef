package collage;

import java.nio.ByteBuffer;

import com.xuggle.ferry.IBuffer;
import com.xuggle.xuggler.IPacket;
import com.xuggle.xuggler.IRational;

public class IPacketFlat {
  public static final int HEADER_SIZE = (4*Long.BYTES) + (5*Integer.BYTES) + Byte.BYTES;
  private long dts;
  private long pts;
  private byte keyPacket;
  private int flags;
  private int streamIndex;
  private long duration;
  private long position;
  private int timeBaseNum;
  private int timeBaseDen;
  private int iPacketDataLength;
  private byte[] iPacketData;
    //  packet.setDts(aDts);
//  packet.setPts(aPts);
//  packet.setKeyPacket(keyPacket);
//  packet.setFlags(flags);
//  packet.setStreamIndex(streamIndex);
//  packet.setDuration(duration);
//  packet.setPosition(position);
//  packet.setTimeBase(aBase);
    public IPacket packet = null;
    private byte[] flatData;
    
    public static IPacketFlat encode(IPacket packet) {
      if (packet == null)
        throw new IllegalArgumentException("Cannot encode null packet");

      IPacketFlat flat = new IPacketFlat();
      flat.packet = packet;
      flat.dts = packet.getDts();
      flat.pts = packet.getPts();
      flat.keyPacket = (byte) (packet.isKeyPacket() ? 1 : 0);
      flat.flags = packet.getFlags();
      flat.streamIndex = packet.getStreamIndex();
      flat.duration = packet.getDuration();
      flat.position = packet.getPosition();
      flat.timeBaseNum = packet.getTimeBase().getNumerator();
      flat.timeBaseDen = packet.getTimeBase().getDenominator();
      flat.iPacketData = packet.getByteBuffer().array();
      flat.iPacketDataLength = flat.iPacketData.length;
      
      flat.encode();
      
      return flat;
    }
    
    public static IPacketFlat decode(byte[] flatData) {
      if (flatData.length < HEADER_SIZE)
        throw new IllegalArgumentException("Bad length IPacketFlat");
      
      IPacketFlat flat = new IPacketFlat();
      flat.flatData = flatData;
      
      flat.decode();
      
      return flat;
    }
    
    private void encode() {
      ByteBuffer buf = ByteBuffer.allocate(HEADER_SIZE + iPacketDataLength);
      buf.putLong(dts);
      buf.putLong(pts);
      buf.put(keyPacket);
      buf.putInt(flags);
      buf.putInt(streamIndex);
      buf.putLong(duration);
      buf.putLong(position);
      buf.putInt(timeBaseNum);
      buf.putInt(timeBaseDen);
      buf.putInt(iPacketDataLength);
      buf.put(iPacketData);
      flatData = buf.array();
    }
    
    private void decode() {
      ByteBuffer buf = ByteBuffer.wrap(flatData);
      dts = buf.getLong();
      pts = buf.getLong();
      keyPacket = buf.get();
      flags = buf.getInt();
      streamIndex = buf.getInt();
      duration = buf.getLong();
      position = buf.getLong();
      timeBaseNum = buf.getInt();
      timeBaseDen = buf.getInt();
      iPacketDataLength = buf.getInt();
      if (buf.remaining() != iPacketDataLength)
        throw new IllegalArgumentException("Decoded length != iPacketData length");
      iPacketData = new byte[iPacketDataLength];
      buf.get(iPacketData);
      
      packet = IPacket.make();
      packet.setDts(dts);
      packet.setPts(pts);
      packet.setKeyPacket(keyPacket == 1);
      packet.setFlags(flags);
      packet.setStreamIndex(streamIndex);
      packet.setDuration(duration);
      packet.setPosition(position);
      packet.setTimeBase(IRational.make(timeBaseNum, timeBaseDen));
      packet.setData(IBuffer.make(null, iPacketData, 0, iPacketDataLength));
    }

    public long dts() {
      return dts;
    }

    public long pts() {
      return pts;
    }

    public boolean isKeyPacket() {
      return keyPacket == 1;
    }

    public int flags() {
      return flags;
    }

    public int streamIndex() {
      return streamIndex;
    }

    public long duration() {
      return duration;
    }

    public long position() {
      return position;
    }

    public IRational timeBase() {
      return IRational.make(timeBaseNum, timeBaseDen);
    }

    public int timeBaseDen() {
      return timeBaseDen;
    }

    public int getiPacketDataLength() {
      return iPacketDataLength;
    }

    public byte[] getiPacketData() {
      return iPacketData;
    }

    public IPacket getPacket() {
      return packet;
    }

    public byte[] getFlatData() {
      return flatData;
    }
  }