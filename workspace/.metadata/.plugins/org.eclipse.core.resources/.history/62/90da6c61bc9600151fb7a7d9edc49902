package collage;

import java.io.BufferedReader;
import java.io.IOException;

public class RTSPRequestPacket extends RTSPPacket {
  private Method reqType = null;
  private Integer rtspSeqNum = null;
  private Integer sessionNum = null;
  private String url = null;

  private String data = null;
  
  // Transport
  private TransportProtocol transportProtocol = TransportProtocol.RTP;
  private Integer[] clientPorts = {};
  private TransportMode transportMode = TransportMode.MULTICAST;
  
  private boolean isStarted = false;
  private boolean isDone = false;

  protected RTSPRequestPacket() {}
  
  public static RTSPResponsePacket make() {
    return new RTSPResponsePacket();
  }
  public RTSPRequestPacket encode(Method reqType, String url, Integer rtspSeqNum, Integer sessionNum) throws IllegalArgumentException {
    RTSPRequestPacket packet = new RTSPRequestPacket();
    packet.reqType = reqType;
    packet.rtspSeqNum = rtspSeqNum;
    packet.sessionNum = sessionNum;
    packet.url = url;
    
    packet.encode();
    
    return packet;
  }
  
  private void decodeMethod(String line) {
    String[] tokens = line.split("\\s+");
    if (tokens.length != 3)
      throw new IllegalArgumentException("Invalid method line: " + line);

    reqType = Method.valueOf(tokens[0]);
    url = tokens[1];
    if (tokens[2] != RTSP_VERSION)
      throw new IllegalArgumentException("Unsupported RTSP Version: " + tokens[2]);
  }
  private void decodeSeqNum(String line) {
    String[] tokens = line.split("\\s+");
    if (tokens.length != 2)
      throw new IllegalArgumentException("Invalid sequence num line: " + line);
    
    try {
      rtspSeqNum = Integer.parseInt(tokens[1]);
    } catch (NumberFormatException e) {
      throw new IllegalArgumentException("Invalid sequence num: " + tokens[1]);
    }
  }
  private void decodeSessionNum(String line) {
    String[] tokens = line.split("\\s+");
    if (tokens.length != 2)
      throw new IllegalArgumentException("Invalid session num line: " + line);
    
    try {
      sessionNum = Integer.parseInt(tokens[1]);
    } catch (NumberFormatException e) {
      throw new IllegalArgumentException("Invalid session num: " + tokens[1]);
    }
  }
  // TODO: implement Transport
  public void decode(String line) {
    if (!isStarted) {
      decodeMethod(line);
      isStarted = true;
      return;
    }
    String[] pair = line.split(":",2);
    if (pair.length != 2)
      throw new IllegalArgumentException("Invalid header line: " + line);
    switch (pair[1]) {
    case "CSeq":
      decodeSeqNum(line);
      break;
    case "Session":
      decodeSessionNum(line);
      break;
    default:
      throw new IllegalArgumentException("Unsupported header type: " + pair[1]);
    }
  }
  public void decode(BufferedReader reader) throws IOException {
    if (isDone)
      throw new RuntimeException("Packet already complete");
    String line = reader.readLine();
    decode(line);
  }
  
  private String encodeMethod() {
    return reqType.toString() + " " + url + " " + RTSP_VERSION + CRLF;
  }
  private String encodeSeqNum() {
    return "CSeq: " + rtspSeqNum + CRLF;
  }
  private String encodeSessionNum() {
    String ret = "";
    if (sessionNum != null)
      ret = "Session: " + sessionNum + CRLF;
    return ret;
  }
  private String encodeTransport() {
    String ret = "";
    if (transportProtocol != null || transportMode != null)
  }
  // TODO: implement Transport 
  private void encode() {
    String encodedPacket = "";
    encodedPacket += encodeMethod();
    encodedPacket += encodeSeqNum();
    encodedPacket += encodeSessionNum();
    encodedPacket += encodeTransport();
    this.data = encodedPacket;
  }
  
  public Method reqType() {
    return reqType;
  }
  public Integer rtspSeqNum() {
    return rtspSeqNum;
  }
  public Integer sessionNum() {
    return sessionNum;
  }
  public String url() {
    return url;
  }
  public String data() {
    return data;
  }
}
